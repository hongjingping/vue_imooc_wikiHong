{"version":3,"sources":["../typings/node_modules/listify/test.js"],"names":[],"mappings":"AAAA;AACA;;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;;AAEA,KAAK,gCAAL,EAAuC,UAAU,CAAV,EAAa;AACnD,GAAE,MAAF,CAAS,YAAY;AAAE;AAAY,EAAnC,EAAqC,SAArC,EAAgD,mBAAhD;AACA,GAAE,GAAF;AACA,CAHD;;AAKA,KAAK,mBAAL,EAA0B,UAAU,CAAV,EAAa;AACtC,GAAE,KAAF,CAAQ,QAAQ,EAAR,CAAR,EAAqB,EAArB,EAAyB,+BAAzB;AACA,GAAE,GAAF;AACA,CAHD;;AAKA,KAAK,kBAAL,EAAyB,UAAU,CAAV,EAAa;AACrC,GAAE,KAAF,CAAQ,QAAQ,CAAC,CAAD,CAAR,CAAR,EAAsB,GAAtB,EAA2B,6BAA3B;AACA,GAAE,GAAF;AACA,CAHD;;AAKA,KAAK,mBAAL,EAA0B,UAAU,CAAV,EAAa;AACtC,GAAE,KAAF,CAAQ,QAAQ,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAR,EAAyB,SAAzB,EAAoC,8BAApC;AACA,GAAE,GAAF;AACA,CAHD;;AAKA,KAAK,0CAAL,EAAiD,UAAU,CAAV,EAAa;AAC7D,GAAE,KAAF,CAAQ,QAAQ,CAAC,CAAD,EAAI,CAAJ,CAAR,EAAgB,EAAE,WAAW,KAAb,EAAhB,CAAR,EAA+C,MAA/C,EAAuD,gDAAvD;AACA,GAAE,GAAF;AACA,CAHD;;AAKA,KAAK,mBAAL,EAA0B,UAAU,CAAV,EAAa;AACtC,GAAE,KAAF,CAAQ,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR,CAAR,EAA4B,aAA5B,EAA2C,uBAA3C;AACA,GAAE,GAAF;AACA,CAHD;;AAKA,KAAK,oBAAL,EAA2B,UAAU,CAAV,EAAa;AACvC,GAAE,KAAF,CAAQ,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR,EAAmB,EAAE,WAAW,IAAb,EAAnB,CAAR,EAAiD,aAAjD,EAAgE,0BAAhE;AACA,GAAE,GAAF;AACA,CAHD;;AAKA,KAAK,oBAAL,EAA2B,UAAU,CAAV,EAAa;AACvC,GAAE,KAAF,CAAQ,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR,EAAmB,EAAE,WAAW,IAAb,EAAnB,CAAR,EAAiD,YAAjD,EAA+D,6BAA/D;AACA,GAAE,GAAF;AACA,CAHD;;AAKA,KAAK,qCAAL,EAA4C,UAAU,CAAV,EAAa;AACxD,KAAI,MAAM,EAAE,UAAU,YAAY;AAAE,UAAO,KAAP;AAAe,GAAzC,EAAV;AACA,KAAI,OAAO,EAAE,UAAU,YAAY;AAAE,UAAO,KAAP;AAAe,GAAzC,EAAX;AACA,GAAE,KAAF,CAAQ,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR,EAAmB,EAAE,WAAW,GAAb,EAAkB,WAAW,IAA7B,EAAnB,CAAR,EAAiE,cAAjE,EAAiF,qBAAjF;AACA,GAAE,GAAF;AACA,CALD","file":"test-compiled.js","sourcesContent":["/*jslint node: true */\n\"use strict\";\n\nvar test = require('tape');\nvar listify = require('./index');\n\ntest('throws when not given an array', function (t) {\n\tt.throws(function () { listify(); }, TypeError, 'requires an array');\n\tt.end();\n});\n\ntest('listifies 0 items', function (t) {\n\tt.equal(listify([]), '', 'empty list gives empty string');\n\tt.end();\n});\n\ntest('listifies 1 item', function (t) {\n\tt.equal(listify([1]), '1', 'one item is just toStringed');\n\tt.end();\n});\n\ntest('listifies 2 items', function (t) {\n\tt.equal(listify([1, 2]), '1 and 2', 'two items gives no separator');\n\tt.end();\n});\n\ntest('listifies 2 items, supports no finalWord', function (t) {\n\tt.equal(listify([1, 2], { finalWord: false }), '1, 2', 'two items, no final word, gives only separator');\n\tt.end();\n});\n\ntest('listifies 3 items', function (t) {\n\tt.equal(listify([1, 2, 3]), '1, 2, and 3', 'listifies three items');\n\tt.end();\n});\n\ntest('supports separator', function (t) {\n\tt.equal(listify([1, 2, 3], { separator: '… ' }), '1… 2… and 3', 'listifies with separator');\n\tt.end();\n});\n\ntest('supports finalWord', function (t) {\n\tt.equal(listify([1, 2, 3], { finalWord: 'or' }), '1, 2, or 3', 'listifies with no finalWord');\n\tt.end();\n});\n\ntest('stringifies separator and finalWord', function (t) {\n\tvar sep = { toString: function () { return 'foo'; } };\n\tvar word = { toString: function () { return 'bar'; } };\n\tt.equal(listify([1, 2, 3], { separator: sep, finalWord: word }), '1foo2foobar3', 'stringifies options');\n\tt.end();\n});\n\n"]}