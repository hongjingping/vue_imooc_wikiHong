{"version":3,"sources":["../../rc/test/nested-env-vars.js"],"names":[],"mappings":";AACA,IAAI,OAAO,KAAK,MAAL,EAAX;AACA,IAAI,IAAI,OAAM,IAAd;AACA,IAAI,IAAI,OAAM,IAAd;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAGA;AACA,QAAQ,GAAR,CAAY,IAAE,aAAd,IAA+B,EAA/B;AACA,QAAQ,GAAR,CAAY,IAAE,eAAd,IAAiC,EAAjC;AACA,QAAQ,GAAR,CAAY,IAAE,gBAAd,IAAkC,GAAlC;AACA,QAAQ,GAAR,CAAY,IAAE,mBAAd,IAAqC,GAArC;AACA,QAAQ,GAAR,CAAY,IAAE,gBAAd,IAAkC,IAAlC;AACA,QAAQ,GAAR,CAAY,IAAE,aAAd,IAA+B,MAA/B;;AAEA;AACA,QAAQ,GAAR,CAAY,IAAE,kBAAd,IAAoC,KAApC;AACA,QAAQ,GAAR,CAAY,IAAE,kBAAd,IAAoC,KAApC;;AAEA;AACA,QAAQ,GAAR,CAAY,IAAE,WAAd,IAA6B,IAA7B;;AAEA;AACA,QAAQ,GAAR,CAAY,IAAE,iBAAd,IAAmC,GAAnC;;AAEA,SAAS,UAAT,CAAoB,MAApB,EAA4B;AAC3B,KAAI,SAAS,QAAQ,KAAR,EAAe,MAAf,EAAuB;AAClC,UAAQ;AAD0B,EAAvB,CAAb;;AAIA,SAAQ,GAAR,CAAY,qCAAZ,EAAkD,EAAC,QAAQ,MAAT,EAAlD,EAAoE,IAApE,EAA0E,MAA1E;;AAEA,QAAO,KAAP,CAAa,OAAO,MAApB,EAA4B,IAA5B;AACA,QAAO,KAAP,CAAa,OAAO,OAAP,CAAe,CAA5B,EAA+B,EAA/B;AACA,QAAO,KAAP,CAAa,OAAO,OAAP,CAAe,CAA5B,EAA+B,EAA/B;AACA;AACA,QAAO,KAAP,CAAa,OAAO,OAAP,CAAe,CAA5B,CAA6B,MAA7B,EAAqC,EAArC;AACA;AACA,QAAO,KAAP,CAAa,OAAO,OAAP,CAAe,CAA5B,CAA6B,MAA7B,EAAqC,EAArC;AACA,QAAO,KAAP,CAAa,OAAO,OAAP,CAAe,CAA5B,EAA+B,MAA/B;AACA;AACA,QAAO,KAAP,CAAa,OAAO,OAAP,CAAe,CAA5B,CAA6B,MAA7B,EAAqC,MAArC;AACA,QAAO,KAAP,CAAa,OAAO,OAAP,CAAe,CAAf,CAAiB,CAA9B,EAAiC,KAAjC;AACA,QAAO,KAAP,CAAa,OAAO,CAAP,CAAS,CAAtB,EAAyB,IAAzB;;AAEA,QAAO,KAAP,CAAa,OAAO,cAApB,EAAoC,GAApC;AACA;;AAED,WAAW,CAAX;AACA,WAAW,CAAX","file":"nested-env-vars-compiled.js","sourcesContent":["\nvar seed = Math.random();\nvar n = 'rc'+ seed;\nvar N = 'RC'+ seed;\nvar assert = require('assert')\n\n\n// Basic usage\nprocess.env[n+'_someOpt__a'] = 42\nprocess.env[n+'_someOpt__x__'] = 99\nprocess.env[n+'_someOpt__a__b'] = 186\nprocess.env[n+'_someOpt__a__b__c'] = 243\nprocess.env[n+'_someOpt__x__y'] = 1862\nprocess.env[n+'_someOpt__z'] = 186577\n\n// Should ignore empty strings from orphaned '__'\nprocess.env[n+'_someOpt__z__x__'] = 18629\nprocess.env[n+'_someOpt__w__w__'] = 18629\n\n// Leading '__' should ignore everything up to 'z'\nprocess.env[n+'___z__i__'] = 9999\n\n// should ignore case for config name section.\nprocess.env[N+'_test_upperCase'] = 187\n\nfunction testPrefix(prefix) {\n\tvar config = require('../')(prefix, {\n\t  option: true\n\t})\n\n\tconsole.log('\\n\\n------ nested-env-vars ------\\n',{prefix: prefix}, '\\n', config);\n\n\tassert.equal(config.option, true)\n\tassert.equal(config.someOpt.a, 42)\n\tassert.equal(config.someOpt.x, 99)\n\t// Should not override `a` once it's been set\n\tassert.equal(config.someOpt.a/*.b*/, 42)\n\t// Should not override `x` once it's been set\n\tassert.equal(config.someOpt.x/*.y*/, 99)\n\tassert.equal(config.someOpt.z, 186577)\n\t// Should not override `z` once it's been set\n\tassert.equal(config.someOpt.z/*.x*/, 186577)\n\tassert.equal(config.someOpt.w.w, 18629)\n\tassert.equal(config.z.i, 9999)\n\n\tassert.equal(config.test_upperCase, 187)\n}\n\ntestPrefix(n);\ntestPrefix(N);\n"]}