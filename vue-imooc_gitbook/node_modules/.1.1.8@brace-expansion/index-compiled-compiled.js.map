{"version":3,"sources":["../.3.0.4@minimatch/node_modules/brace-expansion/index-compiled.js"],"names":[],"mappings":"AAAA,IAAI,YAAY,QAAQ,YAAR,CAAhB;AACA,IAAI,WAAW,QAAQ,gBAAR,CAAf;;AAEA,OAAO,OAAP,GAAiB,SAAjB;;AAEA,IAAI,WAAW,YAAY,KAAK,MAAL,EAAZ,GAA4B,IAA3C;AACA,IAAI,UAAU,WAAW,KAAK,MAAL,EAAX,GAA2B,IAAzC;AACA,IAAI,WAAW,YAAY,KAAK,MAAL,EAAZ,GAA4B,IAA3C;AACA,IAAI,WAAW,YAAY,KAAK,MAAL,EAAZ,GAA4B,IAA3C;AACA,IAAI,YAAY,aAAa,KAAK,MAAL,EAAb,GAA6B,IAA7C;;AAEA,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AACpB,SAAO,SAAS,GAAT,EAAc,EAAd,KAAqB,GAArB,GAA2B,SAAS,GAAT,EAAc,EAAd,CAA3B,GAA+C,IAAI,UAAJ,CAAe,CAAf,CAAtD;AACD;;AAED,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,SAAO,IAAI,KAAJ,CAAU,MAAV,EAAkB,IAAlB,CAAuB,QAAvB,EAAiC,KAAjC,CAAuC,KAAvC,EAA8C,IAA9C,CAAmD,OAAnD,EAA4D,KAA5D,CAAkE,KAAlE,EAAyE,IAAzE,CAA8E,QAA9E,EAAwF,KAAxF,CAA8F,KAA9F,EAAqG,IAArG,CAA0G,QAA1G,EAAoH,KAApH,CAA0H,KAA1H,EAAiI,IAAjI,CAAsI,SAAtI,CAAP;AACD;;AAED,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAC3B,SAAO,IAAI,KAAJ,CAAU,QAAV,EAAoB,IAApB,CAAyB,IAAzB,EAA+B,KAA/B,CAAqC,OAArC,EAA8C,IAA9C,CAAmD,GAAnD,EAAwD,KAAxD,CAA8D,QAA9D,EAAwE,IAAxE,CAA6E,GAA7E,EAAkF,KAAlF,CAAwF,QAAxF,EAAkG,IAAlG,CAAuG,GAAvG,EAA4G,KAA5G,CAAkH,SAAlH,EAA6H,IAA7H,CAAkI,GAAlI,CAAP;AACD;;AAED;AACA;AACA;AACA,SAAS,eAAT,CAAyB,GAAzB,EAA8B;AAC5B,MAAI,CAAC,GAAL,EAAU,OAAO,CAAC,EAAD,CAAP;;AAEV,MAAI,QAAQ,EAAZ;AACA,MAAI,IAAI,SAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,CAAR;;AAEA,MAAI,CAAC,CAAL,EAAQ,OAAO,IAAI,KAAJ,CAAU,GAAV,CAAP;;AAER,MAAI,MAAM,EAAE,GAAZ;AACA,MAAI,OAAO,EAAE,IAAb;AACA,MAAI,OAAO,EAAE,IAAb;AACA,MAAI,IAAI,IAAI,KAAJ,CAAU,GAAV,CAAR;;AAEA,IAAE,EAAE,MAAF,GAAW,CAAb,KAAmB,MAAM,IAAN,GAAa,GAAhC;AACA,MAAI,YAAY,gBAAgB,IAAhB,CAAhB;AACA,MAAI,KAAK,MAAT,EAAiB;AACf,MAAE,EAAE,MAAF,GAAW,CAAb,KAAmB,UAAU,KAAV,EAAnB;AACA,MAAE,IAAF,CAAO,KAAP,CAAa,CAAb,EAAgB,SAAhB;AACD;;AAED,QAAM,IAAN,CAAW,KAAX,CAAiB,KAAjB,EAAwB,CAAxB;;AAEA,SAAO,KAAP;AACD;;AAED,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AACtB,MAAI,CAAC,GAAL,EAAU,OAAO,EAAP;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA,MAAI,IAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,MAAqB,IAAzB,EAA+B;AAC7B,UAAM,WAAW,IAAI,MAAJ,CAAW,CAAX,CAAjB;AACD;;AAED,SAAO,OAAO,aAAa,GAAb,CAAP,EAA0B,IAA1B,EAAgC,GAAhC,CAAoC,cAApC,CAAP;AACD;;AAED,SAAS,QAAT,CAAkB,CAAlB,EAAqB;AACnB,SAAO,CAAP;AACD;;AAED,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AACpB,SAAO,MAAM,GAAN,GAAY,GAAnB;AACD;AACD,SAAS,QAAT,CAAkB,EAAlB,EAAsB;AACpB,SAAQ,UAAS,IAAT,CAAc,EAAd;AAAR;AAED;;AAED,SAAS,GAAT,CAAa,CAAb,EAAgB,CAAhB,EAAmB;AACjB,SAAO,KAAK,CAAZ;AACD;AACD,SAAS,GAAT,CAAa,CAAb,EAAgB,CAAhB,EAAmB;AACjB,SAAO,KAAK,CAAZ;AACD;;AAED,SAAS,MAAT,CAAgB,GAAhB,EAAqB,KAArB,EAA4B;AAC1B,MAAI,aAAa,EAAjB;;AAEA,MAAI,IAAI,SAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,CAAR;AACA,MAAI,CAAC,CAAD,IAAM,MAAM,IAAN,CAAW,EAAE,GAAb,CAAV,EAA6B,OAAO,CAAC,GAAD,CAAP;;AAE7B,MAAI,oBAAoB,iCAAiC,IAAjC,CAAsC,EAAE,IAAxC,CAAxB;AACA,MAAI,kBAAkB,uCAAuC,IAAvC,CAA4C,EAAE,IAA9C,CAAtB;AACA,MAAI,aAAa,qBAAqB,eAAtC;AACA,MAAI,YAAY,EAAE,IAAF,CAAO,OAAP,CAAe,GAAf,KAAuB,CAAvC;AACA,MAAI,CAAC,UAAD,IAAe,CAAC,SAApB,EAA+B;AAC7B;AACA,QAAI,EAAE,IAAF,CAAO,KAAP,CAAa,OAAb,CAAJ,EAA2B;AACzB,YAAM,EAAE,GAAF,GAAQ,GAAR,GAAc,EAAE,IAAhB,GAAuB,QAAvB,GAAkC,EAAE,IAA1C;AACA,aAAO,OAAO,GAAP,CAAP;AACD;AACD,WAAO,CAAC,GAAD,CAAP;AACD;;AAED,MAAI,CAAJ;AACA,MAAI,UAAJ,EAAgB;AACd,QAAI,EAAE,IAAF,CAAO,KAAP,CAAa,MAAb,CAAJ;AACD,GAFD,MAEO;AACL,QAAI,gBAAgB,EAAE,IAAlB,CAAJ;AACA,QAAI,EAAE,MAAF,KAAa,CAAjB,EAAoB;AAClB;AACA,UAAI,OAAO,EAAE,CAAF,CAAP,EAAa,KAAb,EAAoB,GAApB,CAAwB,OAAxB,CAAJ;AACA,UAAI,EAAE,MAAF,KAAa,CAAjB,EAAoB;AAClB,YAAI,OAAO,EAAE,IAAF,CAAO,MAAP,GAAgB,OAAO,EAAE,IAAT,EAAe,KAAf,CAAhB,GAAwC,CAAC,EAAD,CAAnD;AACA,eAAO,KAAK,GAAL,CAAS,UAAU,CAAV,EAAa;AAC3B,iBAAO,EAAE,GAAF,GAAQ,EAAE,CAAF,CAAR,GAAe,CAAtB;AACD,SAFM,CAAP;AAGD;AACF;AACF;;AAED;AACA;;AAEA;AACA,MAAI,MAAM,EAAE,GAAZ;AACA,MAAI,OAAO,EAAE,IAAF,CAAO,MAAP,GAAgB,OAAO,EAAE,IAAT,EAAe,KAAf,CAAhB,GAAwC,CAAC,EAAD,CAAnD;;AAEA,MAAI,CAAJ;;AAEA,MAAI,UAAJ,EAAgB;AACd,QAAI,IAAI,QAAQ,EAAE,CAAF,CAAR,CAAR;AACA,QAAI,IAAI,QAAQ,EAAE,CAAF,CAAR,CAAR;AACA,QAAI,QAAQ,KAAK,GAAL,CAAS,EAAE,CAAF,EAAK,MAAd,EAAsB,EAAE,CAAF,EAAK,MAA3B,CAAZ;AACA,QAAI,OAAO,EAAE,MAAF,IAAY,CAAZ,GAAgB,KAAK,GAAL,CAAS,QAAQ,EAAE,CAAF,CAAR,CAAT,CAAhB,GAA0C,CAArD;AACA,QAAI,OAAO,GAAX;AACA,QAAI,UAAU,IAAI,CAAlB;AACA,QAAI,OAAJ,EAAa;AACX,cAAQ,CAAC,CAAT;AACA,aAAO,GAAP;AACD;AACD,QAAI,MAAM,EAAE,IAAF,CAAO,QAAP,CAAV;;AAEA,QAAI,EAAJ;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,KAAK,CAAL,EAAQ,CAAR,CAAhB,EAA4B,KAAK,IAAjC,EAAuC;AACrC,UAAI,CAAJ;AACA,UAAI,eAAJ,EAAqB;AACnB,YAAI,OAAO,YAAP,CAAoB,CAApB,CAAJ;AACA,YAAI,MAAM,IAAV,EAAgB,IAAI,EAAJ;AACjB,OAHD,MAGO;AACL,YAAI,OAAO,CAAP,CAAJ;AACA,YAAI,GAAJ,EAAS;AACP,cAAI,OAAO,QAAQ,EAAE,MAArB;AACA,cAAI,OAAO,CAAX,EAAc;AACZ,gBAAI,IAAI,IAAI,KAAJ,CAAU,OAAO,CAAjB,EAAoB,IAApB,CAAyB,GAAzB,CAAR;AACA,gBAAI,IAAI,CAAR,EAAW,IAAI,MAAM,CAAN,GAAU,EAAE,KAAF,CAAQ,CAAR,CAAd,CAAX,KAAyC,IAAI,IAAI,CAAR;AAC1C;AACF;AACF;AACD,QAAE,IAAF,CAAO,CAAP;AACD;AACF,GAhCD,MAgCO;AACL,QAAI,UAAU,CAAV,EAAa,UAAU,EAAV,EAAc;AAC7B,aAAO,OAAO,EAAP,EAAW,KAAX,CAAP;AACD,KAFG,CAAJ;AAGD;;AAED,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,EAAE,MAAtB,EAA8B,GAA9B,EAAmC;AACjC,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,UAAI,YAAY,MAAM,EAAE,CAAF,CAAN,GAAa,KAAK,CAAL,CAA7B;AACA,UAAI,CAAC,KAAD,IAAU,UAAV,IAAwB,SAA5B,EAAuC,WAAW,IAAX,CAAgB,SAAhB;AACxC;AACF;;AAED,SAAO,UAAP;AACD;;AAED","file":"index-compiled-compiled.js","sourcesContent":["var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH' + Math.random() + '\\0';\nvar escOpen = '\\0OPEN' + Math.random() + '\\0';\nvar escClose = '\\0CLOSE' + Math.random() + '\\0';\nvar escComma = '\\0COMMA' + Math.random() + '\\0';\nvar escPeriod = '\\0PERIOD' + Math.random() + '\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash).split('\\\\{').join(escOpen).split('\\\\}').join(escClose).split('\\\\,').join(escComma).split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\').split(escOpen).join('{').split(escClose).join('}').split(escComma).join(',').split(escPeriod).join('.');\n}\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str) return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m) return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length - 1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length - 1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str) return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return (/^-?0\\d/.test(el)\n  );\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = m.body.indexOf(',') >= 0;\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length ? expand(m.post, false) : [''];\n        return post.map(function (p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length ? expand(m.post, false) : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length);\n    var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\') c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0) c = '-' + z + c.slice(1);else c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function (el) {\n      return expand(el, false);\n    });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion) expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n//# sourceMappingURL=index-compiled.js.map"]}