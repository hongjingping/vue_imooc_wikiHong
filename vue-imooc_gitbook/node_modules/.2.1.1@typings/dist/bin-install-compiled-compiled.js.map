{"version":3,"sources":["bin-install-compiled.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C,EAAE,OAAO,IAAT,EAA7C;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,iBAAiB,QAAQ,cAAR,CAArB;AACA,IAAI,QAAQ,QAAQ,eAAR,CAAZ;AACA,SAAS,IAAT,GAAgB;AACZ,WAAO,wiDAAP;AACH;AACD,QAAQ,IAAR,GAAe,IAAf;AACA,SAAS,IAAT,CAAc,IAAd,EAAoB,OAApB,EAA6B;AACzB,QAAI,UAAU,QAAQ,OAAtB;AAAA,QACI,UAAU,QAAQ,OADtB;AAEA,QAAI,OAAO,QAAQ,OAAf,KAA2B,WAA/B,EAA4C;AACxC,cAAM,QAAN,CAAe,+DAAf,EAAgF,YAAhF;AACA;AACH;AACD,QAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACnB,eAAO,MAAM,OAAN,CAAc,eAAe,OAAf,CAAuB,OAAvB,CAAd,EAA+C,IAA/C,CAAoD,UAAU,MAAV,EAAkB;AACzE,gBAAI,OAAO,OAAO,IAAlB;AAAA,gBACI,OAAO,OAAO,IADlB;AAEA,oBAAQ,GAAR,CAAY,MAAM,qBAAN,CAA4B,EAAE,MAAM,IAAR,EAAc,MAAM,IAApB,EAA0B,SAAS,OAAnC,EAA5B,CAAZ;AACH,SAJM,CAAP;AAKH;AACD,YAAQ,EAAR,CAAW,WAAX,EAAwB,UAAU,EAAV,EAAc;AAClC,YAAI,YAAY,GAAG,SAAnB;AAAA,YACI,aAAa,GAAG,UADpB;AAAA,YAEI,OAAO,GAAG,IAFd;AAGA,cAAM,OAAN,CAAc,0BAA0B,SAA1B,GAAsC,gCAAtC,GAAyE,IAAzE,GAAgF,MAAhF,GAAyF,UAAzF,GAAsG,GAApH,EAAyH,WAAzH;AACH,KALD;AAMA,YAAQ,EAAR,CAAW,oBAAX,EAAiC,UAAU,EAAV,EAAc;AAC3C,YAAI,OAAO,GAAG,IAAd;AAAA,YACI,eAAe,GAAG,YADtB;AAEA,YAAI,OAAO,OAAO,IAAP,CAAY,YAAZ,EAA0B,GAA1B,CAA8B,UAAU,CAAV,EAAa;AAClD,mBAAO,KAAK,SAAL,CAAe,CAAf,CAAP;AACH,SAFU,CAAX;AAGA,YAAI,KAAK,MAAT,EAAiB;AACb,kBAAM,OAAN,CAAc,OAAO,IAAP,GAAc,kCAAd,GAAmD,QAAQ,IAAR,CAAnD,GAAmE,kCAAjF,EAAqH,oBAArH;AACH;AACJ,KATD;AAUA,WAAO,MAAM,OAAN,CAAc,eAAe,sBAAf,CAAsC,IAAtC,EAA4C,OAA5C,CAAd,EAAoE,IAApE,CAAyE,UAAU,OAAV,EAAmB;AAC/F,aAAK,IAAI,KAAK,CAAT,EAAY,YAAY,OAA7B,EAAsC,KAAK,UAAU,MAArD,EAA6D,IAA7D,EAAmE;AAC/D,gBAAI,SAAS,UAAU,EAAV,CAAb;AACA,gBAAI,OAAO,OAAO,IAAlB;AAAA,gBACI,OAAO,OAAO,IADlB;AAEA,oBAAQ,GAAR,CAAY,MAAM,qBAAN,CAA4B,EAAE,MAAM,IAAR,EAAc,MAAM,IAApB,EAA0B,SAAS,OAAnC,EAA5B,CAAZ;AACH;AACJ,KAPM,CAAP;AAQH;AACD,QAAQ,IAAR,GAAe,IAAf;AACA;;AAEA","file":"bin-install-compiled-compiled.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar listify = require(\"listify\");\nvar typings_core_1 = require(\"typings-core\");\nvar cli_1 = require(\"./support/cli\");\nfunction help() {\n    return \"\\ntypings install (with no arguments, in package directory)\\ntypings install [<name>=]<location>\\n\\n  <name>      Alternate name of the definition\\n  <location>  The location to read from (described below)\\n\\nValid Locations:\\n  [<source>~]<pkg>[@<version>][#<tag>]\\n  file:<path>\\n  github:<org>/<repo>[/<path>][#<commitish>]\\n  bitbucket:<org>/<repo>[/<path>][#<commitish>]\\n  npm:<pkg>[/<path>]\\n  bower:<pkg>[/<path>]\\n  jspm:<pkg> (for jspm@0.17+)\\n  http(s)://<host>/<path>\\n\\n  <source>    The registry mirror: \\\"npm\\\", \\\"bower\\\", \\\"env\\\", \\\"global\\\", \\\"lib\\\" or \\\"dt\\\"\\n              When not specified, `defaultSource` in `.typingsrc` will be used.\\n  <path>      Path to a `.d.ts` file or `typings.json`\\n  <host>      A domain name (with optional port)\\n  <version>   A semver range (E.g. \\\">=4.0\\\")\\n  <tag>       The specific tag of a registry entry\\n  <commitish> A git commit, tag or branch\\n\\nOptions:\\n  [--save|-S]       Persist to \\\"dependencies\\\"\\n  [--save-dev|-D]   Persist to \\\"devDependencies\\\"\\n  [--save-peer|-P]  Persist to \\\"peerDependencies\\\"\\n  [--global|-G]     Install and persist as a global definition\\n    [-SG]           Persist to \\\"globalDependencies\\\"\\n    [-DG]           Persist to \\\"globalDevDependencies\\\"\\n  [--production]    Install only production dependencies (omits dev dependencies) and\\n                    is implictly set when environment variable NODE_ENV=production\\n  [--no-production] Install production and dev dependencies (overrides environment\\n                    variable NODE_ENV=production)\\n\\nAliases: i, in\\n\";\n}\nexports.help = help;\nfunction exec(args, options) {\n    var emitter = options.emitter,\n        unicode = options.unicode;\n    if (typeof options.ambient !== 'undefined') {\n        cli_1.logError('The \"ambient\" flag is deprecated. Please use \"global\" instead', 'deprecated');\n        return;\n    }\n    if (args.length === 0) {\n        return cli_1.spinner(typings_core_1.install(options)).then(function (result) {\n            var name = result.name,\n                tree = result.tree;\n            console.log(cli_1.archifyDependencyTree({ name: name, tree: tree, unicode: unicode }));\n        });\n    }\n    emitter.on('reference', function (_a) {\n        var reference = _a.reference,\n            resolution = _a.resolution,\n            name = _a.name;\n        cli_1.logInfo(\"Stripped reference \\\"\" + reference + \"\\\" during installation from \\\"\" + name + \"\\\" (\" + resolution + \")\", 'reference');\n    });\n    emitter.on('globaldependencies', function (_a) {\n        var name = _a.name,\n            dependencies = _a.dependencies;\n        var deps = Object.keys(dependencies).map(function (x) {\n            return JSON.stringify(x);\n        });\n        if (deps.length) {\n            cli_1.logInfo(\"\\\"\" + name + \"\\\" lists global dependencies on \" + listify(deps) + \" that must be installed manually\", 'globaldependencies');\n        }\n    });\n    return cli_1.spinner(typings_core_1.installDependenciesRaw(args, options)).then(function (results) {\n        for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {\n            var result = results_1[_i];\n            var name = result.name,\n                tree = result.tree;\n            console.log(cli_1.archifyDependencyTree({ name: name, tree: tree, unicode: unicode }));\n        }\n    });\n}\nexports.exec = exec;\n//# sourceMappingURL=bin-install.js.map\n\n//# sourceMappingURL=bin-install-compiled.js.map"]}