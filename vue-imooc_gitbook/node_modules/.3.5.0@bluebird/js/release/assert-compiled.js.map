{"version":3,"sources":["../../../typings/node_modules/bluebird/js/release/assert.js"],"names":[],"mappings":"AAAA;;AACA,OAAO,OAAP,GAAkB,YAAU;AAC5B,QAAI,iBAAkB,YAAW;AAC7B,iBAAS,cAAT,CAAwB,CAAxB,EAA2B;AACvB,iBAAK,YAAL,CAAkB,CAAlB;AACA,iBAAK,OAAL,GAAe,CAAf;AACA,iBAAK,IAAL,GAAY,gBAAZ;AACH;AACD,uBAAe,SAAf,GAA2B,IAAI,KAAJ,EAA3B;AACA,uBAAe,SAAf,CAAyB,WAAzB,GAAuC,cAAvC;AACA,uBAAe,SAAf,CAAyB,YAAzB,GAAwC,KAAxC;AACA,eAAO,cAAP;AACH,KAVoB,EAArB;;AAYA,aAAS,SAAT,CAAmB,IAAnB,EAAyB;AACrB,YAAI,SAAS,EAAb;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,EAAE,CAAnC,EAAsC,OAAO,IAAP,CAAY,QAAQ,CAApB;AACtC,eAAO,MAAP;AACH;;AAED,aAAS,YAAT,CAAsB,QAAtB,EAAgC,IAAhC,EAAsC,MAAtC,EAA8C;AAC1C,YAAI;AACA,gBAAI,SAAS,UAAU,IAAV,CAAb;AACA,gBAAI,kBAAkB,MAAtB;AACA,4BAAgB,IAAhB,CAAqB,YACb,QADa,GACF,GADE,GACG,OAAO,IAAP,CAAY,GAAZ,CADH,GACsB,IAD3C;AAEA,gBAAI,KAAK,SAAS,KAAT,CAAe,IAAf,EAAqB,eAArB,CAAT;AACA,mBAAO,GAAG,KAAH,CAAS,IAAT,EAAe,IAAf,CAAP;AACH,SAPD,CAOE,OAAO,CAAP,EAAU;AACR,gBAAI,EAAE,aAAa,WAAf,CAAJ,EAAiC;AAC7B,sBAAM,CAAN;AACH,aAFD,MAEO;AACH,uBAAO,MAAP;AACH;AACJ;AACJ;;AAED,WAAO,SAAS,MAAT,CAAgB,QAAhB,EAA0B,OAA1B,EAAmC;AACtC,YAAI,aAAa,IAAjB,EAAuB;;AAEvB,YAAI,OAAO,QAAP,KAAoB,QAApB,IACA,SAAS,MAAT,CAAgB,CAAhB,MAAuB,GAD3B,EACgC;AAC5B,gBAAI,iBAAiB,QAArB;AACA,gBAAI,QAAQ,UAAU,MAAtB,CAA6B,IAAI,OAAO,IAAI,KAAJ,CAAU,KAAK,GAAL,CAAS,QAAQ,CAAjB,EAAoB,CAApB,CAAV,CAAX,CAA8C,KAAI,IAAI,MAAM,CAAd,EAAiB,MAAM,KAAvB,EAA8B,EAAE,GAAhC,EAAqC;AAAC,qBAAK,MAAM,CAAX,IAAgB,UAAU,GAAV,CAAhB;AAAgC;AACjJ,gBAAI,aAAa,cAAb,EAA6B,IAA7B,EAAmC,OAAnC,MAAgD,OAApD,EAA6D;AAC7D,sBAAW,iBAAiB,OAAjB,GAA2B,OAAtC;AACH;;AAED,YAAI,MAAM,IAAI,cAAJ,CAAmB,OAAnB,CAAV;AACA,YAAI,MAAM,iBAAV,EAA6B;AACzB,kBAAM,iBAAN,CAAwB,GAAxB,EAA6B,MAA7B;AACH;AACD,cAAM,GAAN;AACH,KAhBD;AAiBC,CArDgB,EAAjB","file":"assert-compiled.js","sourcesContent":["\"use strict\";\nmodule.exports = (function(){\nvar AssertionError = (function() {\n    function AssertionError(a) {\n        this.constructor$(a);\n        this.message = a;\n        this.name = \"AssertionError\";\n    }\n    AssertionError.prototype = new Error();\n    AssertionError.prototype.constructor = AssertionError;\n    AssertionError.prototype.constructor$ = Error;\n    return AssertionError;\n})();\n\nfunction getParams(args) {\n    var params = [];\n    for (var i = 0; i < args.length; ++i) params.push(\"arg\" + i);\n    return params;\n}\n\nfunction nativeAssert(callName, args, expect) {\n    try {\n        var params = getParams(args);\n        var constructorArgs = params;\n        constructorArgs.push(\"return \" +\n                callName + \"(\"+ params.join(\",\") + \");\");\n        var fn = Function.apply(null, constructorArgs);\n        return fn.apply(null, args);\n    } catch (e) {\n        if (!(e instanceof SyntaxError)) {\n            throw e;\n        } else {\n            return expect;\n        }\n    }\n}\n\nreturn function assert(boolExpr, message) {\n    if (boolExpr === true) return;\n\n    if (typeof boolExpr === \"string\" &&\n        boolExpr.charAt(0) === \"%\") {\n        var nativeCallName = boolExpr;\n        var $_len = arguments.length;var args = new Array(Math.max($_len - 2, 0)); for(var $_i = 2; $_i < $_len; ++$_i) {args[$_i - 2] = arguments[$_i];};\n        if (nativeAssert(nativeCallName, args, message) === message) return;\n        message = (nativeCallName + \" !== \" + message);\n    }\n\n    var ret = new AssertionError(message);\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(ret, assert);\n    }\n    throw ret;\n};\n})();\n"]}