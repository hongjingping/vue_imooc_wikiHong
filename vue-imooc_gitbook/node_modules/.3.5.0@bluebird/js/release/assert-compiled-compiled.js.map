{"version":3,"sources":["assert-compiled.js"],"names":[],"mappings":"AAAA;;AAEA,OAAO,OAAP,GAAiB,YAAY;AACzB,QAAI,iBAAiB,YAAY;AAC7B,iBAAS,cAAT,CAAwB,CAAxB,EAA2B;AACvB,iBAAK,YAAL,CAAkB,CAAlB;AACA,iBAAK,OAAL,GAAe,CAAf;AACA,iBAAK,IAAL,GAAY,gBAAZ;AACH;AACD,uBAAe,SAAf,GAA2B,IAAI,KAAJ,EAA3B;AACA,uBAAe,SAAf,CAAyB,WAAzB,GAAuC,cAAvC;AACA,uBAAe,SAAf,CAAyB,YAAzB,GAAwC,KAAxC;AACA,eAAO,cAAP;AACH,KAVoB,EAArB;;AAYA,aAAS,SAAT,CAAmB,IAAnB,EAAyB;AACrB,YAAI,SAAS,EAAb;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,EAAE,CAAnC,EAAsC,OAAO,IAAP,CAAY,QAAQ,CAApB;AACtC,eAAO,MAAP;AACH;;AAED,aAAS,YAAT,CAAsB,QAAtB,EAAgC,IAAhC,EAAsC,MAAtC,EAA8C;AAC1C,YAAI;AACA,gBAAI,SAAS,UAAU,IAAV,CAAb;AACA,gBAAI,kBAAkB,MAAtB;AACA,4BAAgB,IAAhB,CAAqB,YAAY,QAAZ,GAAuB,GAAvB,GAA6B,OAAO,IAAP,CAAY,GAAZ,CAA7B,GAAgD,IAArE;AACA,gBAAI,KAAK,SAAS,KAAT,CAAe,IAAf,EAAqB,eAArB,CAAT;AACA,mBAAO,GAAG,KAAH,CAAS,IAAT,EAAe,IAAf,CAAP;AACH,SAND,CAME,OAAO,CAAP,EAAU;AACR,gBAAI,EAAE,aAAa,WAAf,CAAJ,EAAiC;AAC7B,sBAAM,CAAN;AACH,aAFD,MAEO;AACH,uBAAO,MAAP;AACH;AACJ;AACJ;;AAED,WAAO,SAAS,MAAT,CAAgB,QAAhB,EAA0B,OAA1B,EAAmC;AACtC,YAAI,aAAa,IAAjB,EAAuB;;AAEvB,YAAI,OAAO,QAAP,KAAoB,QAApB,IAAgC,SAAS,MAAT,CAAgB,CAAhB,MAAuB,GAA3D,EAAgE;AAC5D,gBAAI,iBAAiB,QAArB;AACA,gBAAI,QAAQ,UAAU,MAAtB,CAA6B,IAAI,OAAO,IAAI,KAAJ,CAAU,KAAK,GAAL,CAAS,QAAQ,CAAjB,EAAoB,CAApB,CAAV,CAAX,CAA6C,KAAK,IAAI,MAAM,CAAf,EAAkB,MAAM,KAAxB,EAA+B,EAAE,GAAjC,EAAsC;AAC5G,qBAAK,MAAM,CAAX,IAAgB,UAAU,GAAV,CAAhB;AACH;AACD,gBAAI,aAAa,cAAb,EAA6B,IAA7B,EAAmC,OAAnC,MAAgD,OAApD,EAA6D;AAC7D,sBAAU,iBAAiB,OAAjB,GAA2B,OAArC;AACH;;AAED,YAAI,MAAM,IAAI,cAAJ,CAAmB,OAAnB,CAAV;AACA,YAAI,MAAM,iBAAV,EAA6B;AACzB,kBAAM,iBAAN,CAAwB,GAAxB,EAA6B,MAA7B;AACH;AACD,cAAM,GAAN;AACH,KAjBD;AAkBH,CArDgB,EAAjB;;AAuDA","file":"assert-compiled-compiled.js","sourcesContent":["\"use strict\";\n\nmodule.exports = function () {\n    var AssertionError = function () {\n        function AssertionError(a) {\n            this.constructor$(a);\n            this.message = a;\n            this.name = \"AssertionError\";\n        }\n        AssertionError.prototype = new Error();\n        AssertionError.prototype.constructor = AssertionError;\n        AssertionError.prototype.constructor$ = Error;\n        return AssertionError;\n    }();\n\n    function getParams(args) {\n        var params = [];\n        for (var i = 0; i < args.length; ++i) params.push(\"arg\" + i);\n        return params;\n    }\n\n    function nativeAssert(callName, args, expect) {\n        try {\n            var params = getParams(args);\n            var constructorArgs = params;\n            constructorArgs.push(\"return \" + callName + \"(\" + params.join(\",\") + \");\");\n            var fn = Function.apply(null, constructorArgs);\n            return fn.apply(null, args);\n        } catch (e) {\n            if (!(e instanceof SyntaxError)) {\n                throw e;\n            } else {\n                return expect;\n            }\n        }\n    }\n\n    return function assert(boolExpr, message) {\n        if (boolExpr === true) return;\n\n        if (typeof boolExpr === \"string\" && boolExpr.charAt(0) === \"%\") {\n            var nativeCallName = boolExpr;\n            var $_len = arguments.length;var args = new Array(Math.max($_len - 2, 0));for (var $_i = 2; $_i < $_len; ++$_i) {\n                args[$_i - 2] = arguments[$_i];\n            };\n            if (nativeAssert(nativeCallName, args, message) === message) return;\n            message = nativeCallName + \" !== \" + message;\n        }\n\n        var ret = new AssertionError(message);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(ret, assert);\n        }\n        throw ret;\n    };\n}();\n\n//# sourceMappingURL=assert-compiled.js.map"]}