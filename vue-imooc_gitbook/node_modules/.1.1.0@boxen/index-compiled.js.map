{"version":3,"sources":["../boxen/index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\nconst stringWidth = require('string-width');\nconst chalk = require('chalk');\nconst widestLine = require('widest-line');\nconst cliBoxes = require('cli-boxes');\nconst camelCase = require('camelcase');\nconst ansiAlign = require('ansi-align');\nconst termSize = require('term-size');\n\nconst getObject = detail => {\n\tlet obj;\n\n\tif (typeof detail === 'number') {\n\t\tobj = {\n\t\t\ttop: detail,\n\t\t\tright: detail * 3,\n\t\t\tbottom: detail,\n\t\t\tleft: detail * 3\n\t\t};\n\t} else {\n\t\tobj = Object.assign({\n\t\t\ttop: 0,\n\t\t\tright: 0,\n\t\t\tbottom: 0,\n\t\t\tleft: 0\n\t\t}, detail);\n\t}\n\n\treturn obj;\n};\n\nconst getBorderChars = borderStyle => {\n\tconst sides = [\n\t\t'topLeft',\n\t\t'topRight',\n\t\t'bottomRight',\n\t\t'bottomLeft',\n\t\t'vertical',\n\t\t'horizontal'\n\t];\n\n\tlet chars;\n\n\tif (typeof borderStyle === 'string') {\n\t\tchars = cliBoxes[borderStyle];\n\n\t\tif (!chars) {\n\t\t\tthrow new TypeError(`Invalid border style: ${borderStyle}`);\n\t\t}\n\t} else {\n\t\tsides.forEach(key => {\n\t\t\tif (!borderStyle[key] || typeof borderStyle[key] !== 'string') {\n\t\t\t\tthrow new TypeError(`Invalid border style: ${key}`);\n\t\t\t}\n\t\t});\n\n\t\tchars = borderStyle;\n\t}\n\n\treturn chars;\n};\n\nconst getBackgroundColorName = x => camelCase('bg', x);\n\nmodule.exports = (text, opts) => {\n\topts = Object.assign({\n\t\tpadding: 0,\n\t\tborderStyle: 'single',\n\t\tdimBorder: false,\n\t\talign: 'left',\n\t\tfloat: 'left'\n\t}, opts);\n\n\tif (opts.backgroundColor) {\n\t\topts.backgroundColor = getBackgroundColorName(opts.backgroundColor);\n\t}\n\n\tif (opts.borderColor && !chalk[opts.borderColor]) {\n\t\tthrow new Error(`${opts.borderColor} is not a valid borderColor`);\n\t}\n\n\tif (opts.backgroundColor && !chalk[opts.backgroundColor]) {\n\t\tthrow new Error(`${opts.backgroundColor} is not a valid backgroundColor`);\n\t}\n\n\tconst chars = getBorderChars(opts.borderStyle);\n\tconst padding = getObject(opts.padding);\n\tconst margin = getObject(opts.margin);\n\n\tconst colorizeBorder = x => {\n\t\tconst ret = opts.borderColor ? chalk[opts.borderColor](x) : x;\n\t\treturn opts.dimBorder ? chalk.dim(ret) : ret;\n\t};\n\n\tconst colorizeContent = x => opts.backgroundColor ? chalk[opts.backgroundColor](x) : x;\n\n\ttext = ansiAlign(text, {align: opts.align});\n\n\tconst NL = '\\n';\n\tconst PAD = ' ';\n\n\tlet lines = text.split(NL);\n\n\tif (padding.top > 0) {\n\t\tlines = Array(padding.top).fill('').concat(lines);\n\t}\n\n\tif (padding.bottom > 0) {\n\t\tlines = lines.concat(Array(padding.bottom).fill(''));\n\t}\n\n\tconst contentWidth = widestLine(text) + padding.left + padding.right;\n\tconst paddingLeft = PAD.repeat(padding.left);\n\tconst columns = termSize().columns;\n\tlet marginLeft = PAD.repeat(margin.left);\n\n\tif (opts.float === 'center') {\n\t\tconst padWidth = (columns - contentWidth) / 2;\n\t\tmarginLeft = PAD.repeat(padWidth);\n\t} else if (opts.float === 'right') {\n\t\tconst padWidth = Math.max(columns - contentWidth - 2, 0);\n\t\tmarginLeft = PAD.repeat(padWidth);\n\t}\n\n\tconst horizontal = chars.horizontal.repeat(contentWidth);\n\tconst top = colorizeBorder(NL.repeat(margin.top) + marginLeft + chars.topLeft + horizontal + chars.topRight);\n\tconst bottom = colorizeBorder(marginLeft + chars.bottomLeft + horizontal + chars.bottomRight + NL.repeat(margin.bottom));\n\tconst side = colorizeBorder(chars.vertical);\n\n\tconst middle = lines.map(line => {\n\t\tconst paddingRight = PAD.repeat(contentWidth - stringWidth(line) - padding.left);\n\t\treturn marginLeft + side + colorizeContent(paddingLeft + line + paddingRight) + side;\n\t}).join(NL);\n\n\treturn top + NL + middle + NL + bottom;\n};\n\nmodule.exports._borderStyles = cliBoxes;\n"]}