{"version":3,"sources":["../../execa/node_modules/cross-spawn-async/lib/parse.js"],"names":[],"mappings":"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","file":"parse-compiled.js","sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar LRU = require('lru-cache');\nvar resolveCommand = require('./resolveCommand');\n\nvar isWin = process.platform === 'win32';\nvar shebangCache = new LRU({ max: 50, maxAge: 30 * 1000 });  // Cache just for 30sec\n\nfunction readShebang(command) {\n    var buffer;\n    var fd;\n    var match;\n    var shebang;\n\n    // Check if it is in the cache first\n    if (shebangCache.has(command)) {\n        return shebangCache.get(command);\n    }\n\n    // Read the first 150 bytes from the file\n    buffer = new Buffer(150);\n\n    try {\n        fd = fs.openSync(command, 'r');\n        fs.readSync(fd, buffer, 0, 150, 0);\n        fs.closeSync(fd);\n    } catch (e) { /* empty */ }\n\n    // Check if it is a shebang\n    match = buffer.toString().trim().match(/#!(.+)/i);\n\n    if (match) {\n        shebang = match[1].replace(/\\/usr\\/bin\\/env\\s+/i, '');   // Remove /usr/bin/env\n    }\n\n    // Store the shebang in the cache\n    shebangCache.set(command, shebang);\n\n    return shebang;\n}\n\nfunction escapeArg(arg, quote) {\n    // Convert to string\n    arg = '' + arg;\n\n    // If we are not going to quote the argument,\n    // escape shell metacharacters, including double and single quotes:\n    if (!quote) {\n        arg = arg.replace(/([\\(\\)%!\\^<>&|;,\"'\\s])/g, '^$1');\n    } else {\n        // Sequence of backslashes followed by a double quote:\n        // double up all the backslashes and escape the double quote\n        arg = arg.replace(/(\\\\*)\"/g, '$1$1\\\\\"');\n\n        // Sequence of backslashes followed by the end of the string\n        // (which will become a double quote later):\n        // double up all the backslashes\n        arg = arg.replace(/(\\\\*)$/, '$1$1');\n\n        // All other backslashes occur literally\n\n        // Quote the whole thing:\n        arg = '\"' + arg + '\"';\n    }\n\n    return arg;\n}\n\nfunction escapeCommand(command) {\n    // Do not escape if this command is not dangerous..\n    // We do this so that commands like \"echo\" or \"ifconfig\" work\n    // Quoting them, will make them unaccessible\n    return /^[a-z0-9_-]+$/i.test(command) ? command : escapeArg(command, true);\n}\n\nfunction parse(command, args, options) {\n    var shebang;\n    var applyQuotes;\n    var file;\n    var original;\n\n    // Normalize arguments, similar to nodejs\n    if (args && !Array.isArray(args)) {\n        options = args;\n        args = null;\n    }\n\n    args = args ? args.slice(0) : [];  // Clone array to avoid changing the original\n    options = options || {};\n    original = command;\n\n    if (isWin) {\n        // Detect & add support for shebangs\n        file = resolveCommand(command);\n        file = file || resolveCommand(command, true);\n        shebang = file && readShebang(file);\n\n        if (shebang) {\n            args.unshift(file);\n            command = shebang;\n        }\n\n        // Escape command & arguments\n        applyQuotes = command !== 'echo';  // Do not quote arguments for the special \"echo\" command\n        command = escapeCommand(command);\n        args = args.map(function (arg) {\n            return escapeArg(arg, applyQuotes);\n        });\n\n        // Use cmd.exe\n        args = ['/s', '/c', '\"' + command + (args.length ? ' ' + args.join(' ') : '') + '\"'];\n        command = process.env.comspec || 'cmd.exe';\n\n        // Tell node's spawn that the arguments are already escaped\n        options.windowsVerbatimArguments = true;\n    }\n\n    return {\n        command: command,\n        args: args,\n        options: options,\n        file: file,\n        original: original,\n    };\n}\n\nmodule.exports = parse;\n"]}