{"version":3,"sources":["../has/node_modules/function-bind/implementation.js"],"names":[],"mappings":"AAAA,IAAI,gBAAgB,iDAApB;AACA,IAAI,QAAQ,MAAM,SAAN,CAAgB,KAA5B;AACA,IAAI,QAAQ,OAAO,SAAP,CAAiB,QAA7B;AACA,IAAI,WAAW,mBAAf;;AAEA,OAAO,OAAP,GAAiB,SAAS,IAAT,CAAc,IAAd,EAAoB;AACjC,QAAI,SAAS,IAAb;AACA,QAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,MAAM,IAAN,CAAW,MAAX,MAAuB,QAA3D,EAAqE;AACjE,cAAM,IAAI,SAAJ,CAAc,gBAAgB,MAA9B,CAAN;AACH;AACD,QAAI,OAAO,MAAM,IAAN,CAAW,SAAX,EAAsB,CAAtB,CAAX;;AAEA,QAAI,KAAJ;AACA,QAAI,SAAS,YAAY;AACrB,YAAI,gBAAgB,KAApB,EAA2B;AACvB,gBAAI,SAAS,OAAO,KAAP,CACT,IADS,EAET,KAAK,MAAL,CAAY,MAAM,IAAN,CAAW,SAAX,CAAZ,CAFS,CAAb;AAIA,gBAAI,OAAO,MAAP,MAAmB,MAAvB,EAA+B;AAC3B,uBAAO,MAAP;AACH;AACD,mBAAO,IAAP;AACH,SATD,MASO;AACH,mBAAO,OAAO,KAAP,CACH,IADG,EAEH,KAAK,MAAL,CAAY,MAAM,IAAN,CAAW,SAAX,CAAZ,CAFG,CAAP;AAIH;AACJ,KAhBD;;AAkBA,QAAI,cAAc,KAAK,GAAL,CAAS,CAAT,EAAY,OAAO,MAAP,GAAgB,KAAK,MAAjC,CAAlB;AACA,QAAI,YAAY,EAAhB;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,WAApB,EAAiC,GAAjC,EAAsC;AAClC,kBAAU,IAAV,CAAe,MAAM,CAArB;AACH;;AAED,YAAQ,SAAS,QAAT,EAAmB,sBAAsB,UAAU,IAAV,CAAe,GAAf,CAAtB,GAA4C,2CAA/D,EAA4G,MAA5G,CAAR;;AAEA,QAAI,OAAO,SAAX,EAAsB;AAClB,YAAI,QAAQ,SAAS,KAAT,GAAiB,CAAE,CAA/B;AACA,cAAM,SAAN,GAAkB,OAAO,SAAzB;AACA,cAAM,SAAN,GAAkB,IAAI,KAAJ,EAAlB;AACA,cAAM,SAAN,GAAkB,IAAlB;AACH;;AAED,WAAO,KAAP;AACH,CA1CD","file":"implementation-compiled.js","sourcesContent":["var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n"]}