{"version":3,"sources":["../typings/node_modules/xtend/test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["var test = require(\"tape\")\nvar extend = require(\"./\")\nvar mutableExtend = require(\"./mutable\")\n\ntest(\"merge\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = { b: \"bar\" }\n\n    assert.deepEqual(extend(a, b), { a: \"foo\", b: \"bar\" })\n    assert.end()\n})\n\ntest(\"replace\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = { a: \"bar\" }\n\n    assert.deepEqual(extend(a, b), { a: \"bar\" })\n    assert.end()\n})\n\ntest(\"undefined\", function(assert) {\n    var a = { a: undefined }\n    var b = { b: \"foo\" }\n\n    assert.deepEqual(extend(a, b), { a: undefined, b: \"foo\" })\n    assert.deepEqual(extend(b, a), { a: undefined, b: \"foo\" })\n    assert.end()\n})\n\ntest(\"handle 0\", function(assert) {\n    var a = { a: \"default\" }\n    var b = { a: 0 }\n\n    assert.deepEqual(extend(a, b), { a: 0 })\n    assert.deepEqual(extend(b, a), { a: \"default\" })\n    assert.end()\n})\n\ntest(\"is immutable\", function (assert) {\n    var record = {}\n\n    extend(record, { foo: \"bar\" })\n    assert.equal(record.foo, undefined)\n    assert.end()\n})\n\ntest(\"null as argument\", function (assert) {\n    var a = { foo: \"bar\" }\n    var b = null\n    var c = void 0\n\n    assert.deepEqual(extend(b, a, c), { foo: \"bar\" })\n    assert.end()\n})\n\ntest(\"mutable\", function (assert) {\n    var a = { foo: \"bar\" }\n\n    mutableExtend(a, { bar: \"baz\" })\n\n    assert.equal(a.bar, \"baz\")\n    assert.end()\n})\n\ntest(\"null prototype\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = Object.create(null)\n    b.b = \"bar\";\n\n    assert.deepEqual(extend(a, b), { a: \"foo\", b: \"bar\" })\n    assert.end()\n})\n\ntest(\"null prototype mutable\", function (assert) {\n    var a = { foo: \"bar\" }\n    var b = Object.create(null)\n    b.bar = \"baz\";\n\n    mutableExtend(a, b)\n\n    assert.equal(a.bar, \"baz\")\n    assert.end()\n})\n"]}