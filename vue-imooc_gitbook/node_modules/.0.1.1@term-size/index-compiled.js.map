{"version":3,"sources":["../boxen/node_modules/term-size/index.js"],"names":[],"mappings":"AAAA;;AACA,MAAM,OAAO,QAAQ,MAAR,CAAb;AACA,MAAM,QAAQ,QAAQ,OAAR,CAAd;;AAEA,MAAM,SAAS,CAAC,OAAD,EAAU,IAAV,MAAoB;AAClC,UAAS,SAAS,OAAT,EAAkB,EAAlB,CADyB;AAElC,OAAM,SAAS,IAAT,EAAe,EAAf;AAF4B,CAApB,CAAf;;AAKA,OAAO,OAAP,GAAiB,MAAM;AACtB,OAAM,MAAM,QAAQ,GAApB;AACA,OAAM,SAAS,QAAQ,MAAvB;AACA,OAAM,SAAS,QAAQ,MAAvB;;AAEA,KAAI,UAAU,OAAO,OAAjB,IAA4B,OAAO,IAAvC,EAA6C;AAC5C,SAAO,OAAO,OAAO,OAAd,EAAuB,OAAO,IAA9B,CAAP;AACA;;AAED,KAAI,UAAU,OAAO,OAAjB,IAA4B,OAAO,IAAvC,EAA6C;AAC5C,SAAO,OAAO,OAAO,OAAd,EAAuB,OAAO,IAA9B,CAAP;AACA;;AAED;AACA,KAAI,IAAI,OAAJ,IAAe,IAAI,KAAvB,EAA8B;AAC7B,SAAO,OAAO,IAAI,OAAX,EAAoB,IAAI,KAAxB,CAAP;AACA;;AAED,KAAI,QAAQ,QAAR,KAAqB,OAAzB,EAAkC;AACjC,MAAI;AACH;AACA,SAAM,OAAO,MAAM,IAAN,CAAW,KAAK,IAAL,CAAU,SAAV,EAAqB,0BAArB,CAAX,EAA6D,MAA7D,CAAoE,KAApE,CAA0E,OAA1E,CAAb;;AAEA,OAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACtB,WAAO,OAAO,KAAK,CAAL,CAAP,EAAgB,KAAK,CAAL,CAAhB,CAAP;AACA;AACD,GAPD,CAOE,OAAO,GAAP,EAAY,CAAE;AAChB,EATD,MASO;AACN,MAAI,QAAQ,QAAR,KAAqB,QAAzB,EAAmC;AAClC,OAAI;AACH;AACA,UAAM,OAAO,MAAM,SAAN,CAAgB,KAAK,IAAL,CAAU,SAAV,EAAqB,eAArB,CAAhB,EAAuD,CAAC,IAAD,CAAvD,EAA+D,MAA/D,CAAsE,KAAtE,CAA4E,MAA5E,CAAb;;AAEA,QAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACtB,YAAO,OAAO,KAAK,CAAL,CAAP,EAAgB,KAAK,CAAL,CAAhB,CAAP;AACA;AACD,IAPD,CAOE,OAAO,GAAP,EAAY,CAAE;AAChB;;AAED;AACA;AACA,MAAI;AACH,SAAM,OAAO,MAAM,IAAN,CAAW,QAAX,EAAqB,CAAC,IAAD,CAArB,EAA6B,MAA7B,CAAoC,KAApC,CAA0C,MAA1C,CAAb;;AAEA,OAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACtB,WAAO,OAAO,KAAK,CAAL,CAAP,EAAgB,KAAK,CAAL,CAAhB,CAAP;AACA;AACD,GAND,CAME,OAAO,GAAP,EAAY,CAAE;;AAEhB,MAAI;AACH,SAAM,UAAU,MAAM,IAAN,CAAW,MAAX,EAAmB,CAAC,MAAD,CAAnB,EAA6B,MAA7C;AACA,SAAM,OAAO,MAAM,IAAN,CAAW,MAAX,EAAmB,CAAC,OAAD,CAAnB,EAA8B,MAA3C;;AAEA,OAAI,WAAW,IAAf,EAAqB;AACpB,WAAO,OAAO,OAAP,EAAgB,IAAhB,CAAP;AACA;AACD,GAPD,CAOE,OAAO,GAAP,EAAY,CAAE;AAChB;;AAED,QAAO,OAAO,EAAP,EAAW,EAAX,CAAP;AACA,CA5DD","file":"index-compiled.js","sourcesContent":["'use strict';\nconst path = require('path');\nconst execa = require('execa');\n\nconst create = (columns, rows) => ({\n\tcolumns: parseInt(columns, 10),\n\trows: parseInt(rows, 10)\n});\n\nmodule.exports = () => {\n\tconst env = process.env;\n\tconst stdout = process.stdout;\n\tconst stderr = process.stderr;\n\n\tif (stdout && stdout.columns && stdout.rows) {\n\t\treturn create(stdout.columns, stdout.rows);\n\t}\n\n\tif (stderr && stderr.columns && stderr.rows) {\n\t\treturn create(stderr.columns, stderr.rows);\n\t}\n\n\t// these values are static, so not the first choice\n\tif (env.COLUMNS && env.LINES) {\n\t\treturn create(env.COLUMNS, env.LINES);\n\t}\n\n\tif (process.platform === 'win32') {\n\t\ttry {\n\t\t\t// Binary: https://github.com/sindresorhus/win-term-size\n\t\t\tconst size = execa.sync(path.join(__dirname, 'vendor/win-term-size.exe')).stdout.split(/\\r?\\n/);\n\n\t\t\tif (size.length === 2) {\n\t\t\t\treturn create(size[0], size[1]);\n\t\t\t}\n\t\t} catch (err) {}\n\t} else {\n\t\tif (process.platform === 'darwin') {\n\t\t\ttry {\n\t\t\t\t// Binary is from https://www.xquartz.org\n\t\t\t\tconst size = execa.shellSync(path.join(__dirname, 'vendor/resize'), ['-u']).stdout.match(/\\d+/g);\n\n\t\t\t\tif (size.length === 2) {\n\t\t\t\t\treturn create(size[0], size[1]);\n\t\t\t\t}\n\t\t\t} catch (err) {}\n\t\t}\n\n\t\t// `resize` is preferred as it works even when all file descriptors are redirected\n\t\t// https://linux.die.net/man/1/resize\n\t\ttry {\n\t\t\tconst size = execa.sync('resize', ['-u']).stdout.match(/\\d+/g);\n\n\t\t\tif (size.length === 2) {\n\t\t\t\treturn create(size[0], size[1]);\n\t\t\t}\n\t\t} catch (err) {}\n\n\t\ttry {\n\t\t\tconst columns = execa.sync('tput', ['cols']).stdout;\n\t\t\tconst rows = execa.sync('tput', ['lines']).stdout;\n\n\t\t\tif (columns && rows) {\n\t\t\t\treturn create(columns, rows);\n\t\t\t}\n\t\t} catch (err) {}\n\t}\n\n\treturn create(80, 24);\n};\n"]}