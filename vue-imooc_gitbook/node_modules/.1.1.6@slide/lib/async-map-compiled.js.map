{"version":3,"sources":["../../slide/lib/async-map.js"],"names":[],"mappings":";AACA;;;;;;;;;;AAUA,OAAO,OAAP,GAAiB,QAAjB;;AAEA,SAAS,QAAT,GAAqB;AACnB,MAAI,QAAQ,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,CAAZ;AAAA,MACI,OAAO,MAAM,KAAN,MAAiB,EAD5B;AAAA,MAEI,MAAM,MAAM,GAAN,EAFV;AAGA,MAAI,OAAO,GAAP,KAAe,UAAnB,EAA+B,MAAM,IAAI,KAAJ,CACnC,kCADmC,CAAN;AAE/B,MAAI,CAAC,IAAL,EAAW,OAAO,IAAI,IAAJ,EAAU,EAAV,CAAP;AACX,MAAI,CAAC,MAAM,OAAN,CAAc,IAAd,CAAL,EAA0B,OAAO,CAAC,IAAD,CAAP;AAC1B,MAAI,IAAI,MAAM,MAAd;AAAA,MACI,OAAO,EADX,CACc;AADd;AAAA,MAEI,WAAW,IAFf;AAAA,MAGI,IAAI,KAAK,MAHb;AAAA,MAII,IAAI,IAAI,CAJZ;AAKA,MAAI,CAAC,CAAL,EAAQ,OAAO,IAAI,IAAJ,EAAU,EAAV,CAAP;AACR,WAAS,EAAT,CAAa,EAAb,EAAiB;AACf,QAAI,MAAM,CAAC,QAAX,EAAqB,WAAW,EAAX;;AAErB,QAAI,SAAS,UAAU,MAAvB;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAkC,IAAI,UAAU,CAAV,MAAiB,SAArB,EAAgC;AAChE,WAAK,IAAI,CAAT,IAAc,CAAC,KAAK,IAAI,CAAT,KAAe,EAAhB,EAAoB,MAApB,CAA2B,UAAU,CAAV,CAA3B,CAAd;AACD;AACD;AACA,QAAI,KAAK,MAAL,GAAc,CAAlB,EAAqB;AACnB,UAAI,UAAU,KAAK,KAAL,CAAW,CAAX,CAAd;AACA,WAAK,CAAC,KAAK,MAAL,GAAc,CAAf,IAAoB,CAAzB;AACA,UAAI,KAAK,MAAT;AACA,cAAQ,QAAR,CAAiB,YAAY;AAC3B,gBAAQ,OAAR,CAAgB,UAAU,EAAV,EAAc;AAC5B,gBAAM,OAAN,CAAc,UAAU,EAAV,EAAc;AAAE,eAAG,EAAH,EAAO,EAAP;AAAY,WAA1C;AACD,SAFD;AAGD,OAJD;AAKD;;AAED,QAAI,EAAE,CAAF,KAAQ,CAAZ,EAAe,IAAI,KAAJ,CAAU,IAAV,EAAgB,CAAC,QAAD,EAAW,MAAX,CAAkB,IAAlB,CAAhB;AAChB;AACD;AACA;AACA,OAAK,OAAL,CAAa,UAAU,EAAV,EAAc;AACzB,UAAM,OAAN,CAAc,UAAU,EAAV,EAAc;AAAE,SAAG,EAAH,EAAO,EAAP;AAAY,KAA1C;AACD,GAFD;AAGD","file":"async-map-compiled.js","sourcesContent":["\n/*\nusage:\n\n// do something to a list of things\nasyncMap(myListOfStuff, function (thing, cb) { doSomething(thing.foo, cb) }, cb)\n// do more than one thing to each item\nasyncMap(list, fooFn, barFn, cb)\n\n*/\n\nmodule.exports = asyncMap\n\nfunction asyncMap () {\n  var steps = Array.prototype.slice.call(arguments)\n    , list = steps.shift() || []\n    , cb_ = steps.pop()\n  if (typeof cb_ !== \"function\") throw new Error(\n    \"No callback provided to asyncMap\")\n  if (!list) return cb_(null, [])\n  if (!Array.isArray(list)) list = [list]\n  var n = steps.length\n    , data = [] // 2d array\n    , errState = null\n    , l = list.length\n    , a = l * n\n  if (!a) return cb_(null, [])\n  function cb (er) {\n    if (er && !errState) errState = er\n\n    var argLen = arguments.length\n    for (var i = 1; i < argLen; i ++) if (arguments[i] !== undefined) {\n      data[i - 1] = (data[i - 1] || []).concat(arguments[i])\n    }\n    // see if any new things have been added.\n    if (list.length > l) {\n      var newList = list.slice(l)\n      a += (list.length - l) * n\n      l = list.length\n      process.nextTick(function () {\n        newList.forEach(function (ar) {\n          steps.forEach(function (fn) { fn(ar, cb) })\n        })\n      })\n    }\n\n    if (--a === 0) cb_.apply(null, [errState].concat(data))\n  }\n  // expect the supplied cb function to be called\n  // \"n\" times for each thing in the array.\n  list.forEach(function (ar) {\n    steps.forEach(function (fn) { fn(ar, cb) })\n  })\n}\n"]}