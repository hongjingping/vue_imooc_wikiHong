{"version":3,"sources":["../which/which.js"],"names":[],"mappings":"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","file":"which-compiled.js","sourcesContent":["module.exports = which\nwhich.sync = whichSync\n\nvar isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nvar path = require('path')\nvar COLON = isWindows ? ';' : ':'\nvar isexe = require('isexe')\n\nfunction getNotFoundError (cmd) {\n  var er = new Error('not found: ' + cmd)\n  er.code = 'ENOENT'\n\n  return er\n}\n\nfunction getPathInfo (cmd, opt) {\n  var colon = opt.colon || COLON\n  var pathEnv = opt.path || process.env.PATH || ''\n  var pathExt = ['']\n\n  pathEnv = pathEnv.split(colon)\n\n  var pathExtExe = ''\n  if (isWindows) {\n    pathEnv.unshift(process.cwd())\n    pathExtExe = (opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM')\n    pathExt = pathExtExe.split(colon)\n\n\n    // Always test the cmd itself first.  isexe will check to make sure\n    // it's found in the pathExt set.\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  if (cmd.match(/\\//) || isWindows && cmd.match(/\\\\/))\n    pathEnv = ['']\n\n  return {\n    env: pathEnv,\n    ext: pathExt,\n    extExe: pathExtExe\n  }\n}\n\nfunction which (cmd, opt, cb) {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  ;(function F (i, l) {\n    if (i === l) {\n      if (opt.all && found.length)\n        return cb(null, found)\n      else\n        return cb(getNotFoundError(cmd))\n    }\n\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && (/^\\.[\\\\\\/]/).test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    ;(function E (ii, ll) {\n      if (ii === ll) return F(i + 1, l)\n      var ext = pathExt[ii]\n      isexe(p + ext, { pathExt: pathExtExe }, function (er, is) {\n        if (!er && is) {\n          if (opt.all)\n            found.push(p + ext)\n          else\n            return cb(null, p + ext)\n        }\n        return E(ii + 1, ll)\n      })\n    })(0, pathExt.length)\n  })(0, pathEnv.length)\n}\n\nfunction whichSync (cmd, opt) {\n  opt = opt || {}\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  for (var i = 0, l = pathEnv.length; i < l; i ++) {\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && /^\\.[\\\\\\/]/.test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    for (var j = 0, ll = pathExt.length; j < ll; j ++) {\n      var cur = p + pathExt[j]\n      var is\n      try {\n        is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  throw getNotFoundError(cmd)\n}\n"]}