{"version":3,"sources":["../rc/node_modules/strip-json-comments/index.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,gBAAgB,CAApB;AACA,IAAI,eAAe,CAAnB;;AAEA,SAAS,sBAAT,GAAkC;AACjC,QAAO,EAAP;AACA;;AAED,SAAS,mBAAT,CAA6B,GAA7B,EAAkC,KAAlC,EAAyC,GAAzC,EAA8C;AAC7C,QAAO,IAAI,KAAJ,CAAU,KAAV,EAAiB,GAAjB,EAAsB,OAAtB,CAA8B,KAA9B,EAAqC,GAArC,CAAP;AACA;;AAED,OAAO,OAAP,GAAiB,UAAU,GAAV,EAAe,IAAf,EAAqB;AACrC,QAAO,QAAQ,EAAf;;AAEA,KAAI,WAAJ;AACA,KAAI,QAAJ;AACA,KAAI,eAAe,KAAnB;AACA,KAAI,gBAAgB,KAApB;AACA,KAAI,SAAS,CAAb;AACA,KAAI,MAAM,EAAV;AACA,KAAI,QAAQ,KAAK,UAAL,KAAoB,KAApB,GAA4B,sBAA5B,GAAqD,mBAAjE;;AAEA,MAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,GAAhC,EAAqC;AACpC,gBAAc,IAAI,CAAJ,CAAd;AACA,aAAW,IAAI,IAAI,CAAR,CAAX;;AAEA,MAAI,CAAC,aAAD,IAAkB,gBAAgB,GAAtC,EAA2C;AAC1C,OAAI,UAAU,IAAI,IAAI,CAAR,MAAe,IAAf,IAAuB,IAAI,IAAI,CAAR,MAAe,IAApD;AACA,OAAI,CAAC,OAAL,EAAc;AACb,mBAAe,CAAC,YAAhB;AACA;AACD;;AAED,MAAI,YAAJ,EAAkB;AACjB;AACA;;AAED,MAAI,CAAC,aAAD,IAAkB,cAAc,QAAd,KAA2B,IAAjD,EAAuD;AACtD,UAAO,IAAI,KAAJ,CAAU,MAAV,EAAkB,CAAlB,CAAP;AACA,YAAS,CAAT;AACA,mBAAgB,aAAhB;AACA;AACA,GALD,MAKO,IAAI,kBAAkB,aAAlB,IAAmC,cAAc,QAAd,KAA2B,MAAlE,EAA0E;AAChF;AACA,mBAAgB,KAAhB;AACA,UAAO,MAAM,GAAN,EAAW,MAAX,EAAmB,CAAnB,CAAP;AACA,YAAS,CAAT;AACA;AACA,GANM,MAMA,IAAI,kBAAkB,aAAlB,IAAmC,gBAAgB,IAAvD,EAA6D;AACnE,mBAAgB,KAAhB;AACA,UAAO,MAAM,GAAN,EAAW,MAAX,EAAmB,CAAnB,CAAP;AACA,YAAS,CAAT;AACA,GAJM,MAIA,IAAI,CAAC,aAAD,IAAkB,cAAc,QAAd,KAA2B,IAAjD,EAAuD;AAC7D,UAAO,IAAI,KAAJ,CAAU,MAAV,EAAkB,CAAlB,CAAP;AACA,YAAS,CAAT;AACA,mBAAgB,YAAhB;AACA;AACA;AACA,GANM,MAMA,IAAI,kBAAkB,YAAlB,IAAkC,cAAc,QAAd,KAA2B,IAAjE,EAAuE;AAC7E;AACA,mBAAgB,KAAhB;AACA,UAAO,MAAM,GAAN,EAAW,MAAX,EAAmB,IAAI,CAAvB,CAAP;AACA,YAAS,IAAI,CAAb;AACA;AACA;AACD;;AAED,QAAO,OAAO,gBAAgB,MAAM,IAAI,MAAJ,CAAW,MAAX,CAAN,CAAhB,GAA4C,IAAI,MAAJ,CAAW,MAAX,CAAnD,CAAP;AACA,CAzDD","file":"index-compiled.js","sourcesContent":["'use strict';\nvar singleComment = 1;\nvar multiComment = 2;\n\nfunction stripWithoutWhitespace() {\n\treturn '';\n}\n\nfunction stripWithWhitespace(str, start, end) {\n\treturn str.slice(start, end).replace(/\\S/g, ' ');\n}\n\nmodule.exports = function (str, opts) {\n\topts = opts || {};\n\n\tvar currentChar;\n\tvar nextChar;\n\tvar insideString = false;\n\tvar insideComment = false;\n\tvar offset = 0;\n\tvar ret = '';\n\tvar strip = opts.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;\n\n\tfor (var i = 0; i < str.length; i++) {\n\t\tcurrentChar = str[i];\n\t\tnextChar = str[i + 1];\n\n\t\tif (!insideComment && currentChar === '\"') {\n\t\t\tvar escaped = str[i - 1] === '\\\\' && str[i - 2] !== '\\\\';\n\t\t\tif (!escaped) {\n\t\t\t\tinsideString = !insideString;\n\t\t\t}\n\t\t}\n\n\t\tif (insideString) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!insideComment && currentChar + nextChar === '//') {\n\t\t\tret += str.slice(offset, i);\n\t\t\toffset = i;\n\t\t\tinsideComment = singleComment;\n\t\t\ti++;\n\t\t} else if (insideComment === singleComment && currentChar + nextChar === '\\r\\n') {\n\t\t\ti++;\n\t\t\tinsideComment = false;\n\t\t\tret += strip(str, offset, i);\n\t\t\toffset = i;\n\t\t\tcontinue;\n\t\t} else if (insideComment === singleComment && currentChar === '\\n') {\n\t\t\tinsideComment = false;\n\t\t\tret += strip(str, offset, i);\n\t\t\toffset = i;\n\t\t} else if (!insideComment && currentChar + nextChar === '/*') {\n\t\t\tret += str.slice(offset, i);\n\t\t\toffset = i;\n\t\t\tinsideComment = multiComment;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t} else if (insideComment === multiComment && currentChar + nextChar === '*/') {\n\t\t\ti++;\n\t\t\tinsideComment = false;\n\t\t\tret += strip(str, offset, i + 1);\n\t\t\toffset = i + 1;\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\treturn ret + (insideComment ? strip(str.substr(offset)) : str.substr(offset));\n};\n"]}