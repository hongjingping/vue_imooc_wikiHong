{"version":3,"sources":["../got/node_modules/get-stream/index.js"],"names":[],"mappings":"AAAA;;AACA,MAAM,eAAe,QAAQ,iBAAR,CAArB;;AAEA,SAAS,SAAT,CAAmB,WAAnB,EAAgC,IAAhC,EAAsC;AACrC,KAAI,CAAC,WAAL,EAAkB;AACjB,SAAO,QAAQ,MAAR,CAAe,IAAI,KAAJ,CAAU,mBAAV,CAAf,CAAP;AACA;;AAED,QAAO,OAAO,MAAP,CAAc,EAAC,WAAW,QAAZ,EAAd,EAAqC,IAArC,CAAP;;AAEA,OAAM,YAAY,KAAK,SAAvB;AACA,KAAI,MAAJ;AACA,KAAI,KAAJ;;AAEA,OAAM,IAAI,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AAC1C,QAAM,QAAQ,OAAO;AACpB,OAAI,GAAJ,EAAS;AAAE;AACV,QAAI,YAAJ,GAAmB,OAAO,gBAAP,EAAnB;AACA;;AAED,UAAO,GAAP;AACA,GAND;;AAQA,WAAS,aAAa,IAAb,CAAT;AACA,cAAY,IAAZ,CAAiB,OAAjB,EAA0B,KAA1B;AACA,cAAY,IAAZ,CAAiB,MAAjB;;AAEA,SAAO,EAAP,CAAU,MAAV,EAAkB,MAAM;AACvB,OAAI,OAAO,iBAAP,KAA6B,SAAjC,EAA4C;AAC3C,WAAO,IAAI,KAAJ,CAAU,oBAAV,CAAP;AACA;AACD,GAJD;AAKA,SAAO,IAAP,CAAY,OAAZ,EAAqB,KAArB;AACA,SAAO,EAAP,CAAU,KAAV,EAAiB,OAAjB;;AAEA,UAAQ,MAAM;AACb;AACA,OAAI,YAAY,MAAhB,EAAwB;AACvB,gBAAY,MAAZ,CAAmB,MAAnB;AACA;AACD,GALD;AAMA,EA3BS,CAAV;;AA6BA,GAAE,IAAF,CAAO,KAAP,EAAc,KAAd;;AAEA,QAAO,EAAE,IAAF,CAAO,MAAM,OAAO,gBAAP,EAAb,CAAP;AACA;;AAED,OAAO,OAAP,GAAiB,SAAjB;AACA,OAAO,OAAP,CAAe,MAAf,GAAwB,CAAC,MAAD,EAAS,IAAT,KAAkB,UAAU,MAAV,EAAkB,OAAO,MAAP,CAAc,EAAd,EAAkB,IAAlB,EAAwB,EAAC,UAAU,QAAX,EAAxB,CAAlB,CAA1C;AACA,OAAO,OAAP,CAAe,KAAf,GAAuB,CAAC,MAAD,EAAS,IAAT,KAAkB,UAAU,MAAV,EAAkB,OAAO,MAAP,CAAc,EAAd,EAAkB,IAAlB,EAAwB,EAAC,OAAO,IAAR,EAAxB,CAAlB,CAAzC","file":"index-compiled.js","sourcesContent":["'use strict';\nconst bufferStream = require('./buffer-stream');\n\nfunction getStream(inputStream, opts) {\n\tif (!inputStream) {\n\t\treturn Promise.reject(new Error('Expected a stream'));\n\t}\n\n\topts = Object.assign({maxBuffer: Infinity}, opts);\n\n\tconst maxBuffer = opts.maxBuffer;\n\tlet stream;\n\tlet clean;\n\n\tconst p = new Promise((resolve, reject) => {\n\t\tconst error = err => {\n\t\t\tif (err) { // null check\n\t\t\t\terr.bufferedData = stream.getBufferedValue();\n\t\t\t}\n\n\t\t\treject(err);\n\t\t};\n\n\t\tstream = bufferStream(opts);\n\t\tinputStream.once('error', error);\n\t\tinputStream.pipe(stream);\n\n\t\tstream.on('data', () => {\n\t\t\tif (stream.getBufferedLength() > maxBuffer) {\n\t\t\t\treject(new Error('maxBuffer exceeded'));\n\t\t\t}\n\t\t});\n\t\tstream.once('error', error);\n\t\tstream.on('end', resolve);\n\n\t\tclean = () => {\n\t\t\t// some streams doesn't implement the `stream.Readable` interface correctly\n\t\t\tif (inputStream.unpipe) {\n\t\t\t\tinputStream.unpipe(stream);\n\t\t\t}\n\t\t};\n\t});\n\n\tp.then(clean, clean);\n\n\treturn p.then(() => stream.getBufferedValue());\n}\n\nmodule.exports = getStream;\nmodule.exports.buffer = (stream, opts) => getStream(stream, Object.assign({}, opts, {encoding: 'buffer'}));\nmodule.exports.array = (stream, opts) => getStream(stream, Object.assign({}, opts, {array: true}));\n"]}