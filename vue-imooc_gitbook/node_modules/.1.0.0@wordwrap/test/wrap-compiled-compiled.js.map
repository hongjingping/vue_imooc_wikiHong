{"version":3,"sources":["../../.2.1.1@typings/node_modules/wordwrap/test/wrap-compiled.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,WAAW,QAAQ,KAAR,CAAf;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,WAAW,GAAG,YAAH,CAAgB,YAAY,eAA5B,EAA6C,MAA7C,CAAf;;AAEA,KAAK,QAAL,EAAe,UAAU,CAAV,EAAa;AACxB,QAAI,QAAQ,SAAS,EAAT,EAAa,QAAb,EAAuB,KAAvB,CAA6B,IAA7B,CAAZ;AACA,QAAI,QAAQ,SAAS,KAAT,CAAe,KAAf,CAAZ;;AAEA,UAAM,OAAN,CAAc,UAAU,IAAV,EAAgB;AAC1B,UAAE,EAAF,CAAK,KAAK,MAAL,IAAe,EAApB,EAAwB,mBAAxB;AACA,YAAI,SAAS,KAAK,KAAL,CAAW,IAAX,IAAmB,KAAK,KAAL,CAAW,KAAX,CAAnB,GAAuC,EAApD;AACA,UAAE,SAAF,CAAY,MAAZ,EAAoB,MAAM,MAAN,CAAa,CAAb,EAAgB,OAAO,MAAvB,CAApB;AACH,KAJD;AAKA,MAAE,GAAF;AACH,CAVD;;AAYA,KAAK,eAAL,EAAsB,UAAU,CAAV,EAAa;AAC/B,QAAI,QAAQ,SAAS,EAAT,EAAa,GAAb,EAAkB,QAAlB,EAA4B,KAA5B,CAAkC,IAAlC,CAAZ;AACA,QAAI,QAAQ,SAAS,KAAT,CAAe,KAAf,CAAZ;;AAEA,UAAM,OAAN,CAAc,UAAU,IAAV,EAAgB;AAC1B,UAAE,EAAF,CAAK,KAAK,MAAL,IAAe,GAApB,EAAyB,oBAAzB;AACA,YAAI,SAAS,KAAK,KAAL,CAAW,KAAX,EAAkB,MAAlB,CAAyB,UAAU,CAAV,EAAa;AAC/C,mBAAO,EAAE,KAAF,CAAQ,IAAR,CAAP;AACH,SAFY,CAAb;AAGA,UAAE,SAAF,CAAY,MAAZ,EAAoB,MAAM,MAAN,CAAa,CAAb,EAAgB,OAAO,MAAvB,CAApB;AACA,UAAE,SAAF,CAAY,KAAK,KAAL,CAAW,CAAX,EAAc,EAAd,CAAZ,EAA+B,IAAI,KAAJ,CAAU,KAAK,CAAf,EAAkB,IAAlB,CAAuB,GAAvB,CAA/B;AACH,KAPD;AAQA,MAAE,GAAF;AACH,CAbD;;AAeA","file":"wrap-compiled-compiled.js","sourcesContent":["var test = require('tape');\nvar wordwrap = require('../');\n\nvar fs = require('fs');\nvar idleness = fs.readFileSync(__dirname + '/idleness.txt', 'utf8');\n\ntest('stop80', function (t) {\n    var lines = wordwrap(80)(idleness).split(/\\n/);\n    var words = idleness.split(/\\s+/);\n\n    lines.forEach(function (line) {\n        t.ok(line.length <= 80, 'line > 80 columns');\n        var chunks = line.match(/\\S/) ? line.split(/\\s+/) : [];\n        t.deepEqual(chunks, words.splice(0, chunks.length));\n    });\n    t.end();\n});\n\ntest('start20stop60', function (t) {\n    var lines = wordwrap(20, 100)(idleness).split(/\\n/);\n    var words = idleness.split(/\\s+/);\n\n    lines.forEach(function (line) {\n        t.ok(line.length <= 100, 'line > 100 columns');\n        var chunks = line.split(/\\s+/).filter(function (x) {\n            return x.match(/\\S/);\n        });\n        t.deepEqual(chunks, words.splice(0, chunks.length));\n        t.deepEqual(line.slice(0, 20), new Array(20 + 1).join(' '));\n    });\n    t.end();\n});\n\n//# sourceMappingURL=wrap-compiled.js.map"]}