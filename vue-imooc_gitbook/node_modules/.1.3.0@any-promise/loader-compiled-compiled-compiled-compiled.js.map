{"version":3,"sources":["../typings/node_modules/typings-core/node_modules/jspm-config/node_modules/thenify/node_modules/any-promise/loader-compiled-compiled-compiled.js"],"names":[],"mappings":"AAAA;AACA;;AAEA,IAAI,mBAAmB,4BAAvB;;;AAGA;AACA,aAAa,IAJb;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAO,OAAP,GAAiB,UAAU,IAAV,EAAgB,kBAAhB,EAAoC;AACnD,SAAO,SAAS,QAAT,CAAkB,cAAlB,EAAkC,IAAlC,EAAwC;AAC7C,qBAAiB,kBAAkB,IAAnC;AACA,WAAO,QAAQ,EAAf;AACA;AACA,QAAI,iBAAiB,KAAK,MAAL,KAAgB,KAArC;;AAEA;AACA,QAAI,eAAe,IAAf,IAAuB,cAA3B,EAA2C;AACzC,mBAAa,KAAK,gBAAL,KAA0B,IAAvC;AACD;;AAED,QAAI,eAAe,IAAf,IAAuB,mBAAmB,IAA1C,IAAkD,WAAW,cAAX,KAA8B,cAApF,EAAoG;AAClG;AACA,YAAM,IAAI,KAAJ,CAAU,qCAAqC,WAAW,cAAhD,GAAiE,+DAAjE,GAAmI,yEAA7I,CAAN;AACD;;AAED,QAAI,eAAe,IAAnB,EAAyB;AACvB;AACA,UAAI,mBAAmB,IAAnB,IAA2B,OAAO,KAAK,OAAZ,KAAwB,WAAvD,EAAoE;AAClE,qBAAa;AACX,mBAAS,KAAK,OADH;AAEX,0BAAgB;AAFL,SAAb;AAID,OALD,MAKO;AACL;AACA,qBAAa,mBAAmB,cAAnB,CAAb;AACD;;AAED,UAAI,cAAJ,EAAoB;AAClB;AACA,aAAK,gBAAL,IAAyB,UAAzB;AACD;AACF;;AAED,WAAO,UAAP;AACD,GAnCD;AAoCD,CArCD;;AAuCA;;AAEA;;AAEA","file":"loader-compiled-compiled-compiled-compiled.js","sourcesContent":["\"use strict\";\n// global key for user preferred registration\n\nvar REGISTRATION_KEY = '@@any-promise/REGISTRATION',\n\n\n// Prior registration (preferred or detected)\nregistered = null;\n\n/**\n * Registers the given implementation.  An implementation must\n * be registered prior to any call to `require(\"any-promise\")`,\n * typically on application load.\n *\n * If called with no arguments, will return registration in\n * following priority:\n *\n * For Node.js:\n *\n * 1. Previous registration\n * 2. global.Promise if node.js version >= 0.12\n * 3. Auto detected promise based on first sucessful require of\n *    known promise libraries. Note this is a last resort, as the\n *    loaded library is non-deterministic. node.js >= 0.12 will\n *    always use global.Promise over this priority list.\n * 4. Throws error.\n *\n * For Browser:\n *\n * 1. Previous registration\n * 2. window.Promise\n * 3. Throws error.\n *\n * Options:\n *\n * Promise: Desired Promise constructor\n * global: Boolean - Should the registration be cached in a global variable to\n * allow cross dependency/bundle registration?  (default true)\n */\nmodule.exports = function (root, loadImplementation) {\n  return function register(implementation, opts) {\n    implementation = implementation || null;\n    opts = opts || {};\n    // global registration unless explicitly  {global: false} in options (default true)\n    var registerGlobal = opts.global !== false;\n\n    // load any previous global registration\n    if (registered === null && registerGlobal) {\n      registered = root[REGISTRATION_KEY] || null;\n    }\n\n    if (registered !== null && implementation !== null && registered.implementation !== implementation) {\n      // Throw error if attempting to redefine implementation\n      throw new Error('any-promise already defined as \"' + registered.implementation + '\".  You can only register an implementation before the first ' + ' call to require(\"any-promise\") and an implementation cannot be changed');\n    }\n\n    if (registered === null) {\n      // use provided implementation\n      if (implementation !== null && typeof opts.Promise !== 'undefined') {\n        registered = {\n          Promise: opts.Promise,\n          implementation: implementation\n        };\n      } else {\n        // require implementation if implementation is specified but not provided\n        registered = loadImplementation(implementation);\n      }\n\n      if (registerGlobal) {\n        // register preference globally in case multiple installations\n        root[REGISTRATION_KEY] = registered;\n      }\n    }\n\n    return registered;\n  };\n};\n\n//# sourceMappingURL=loader-compiled.js.map\n\n//# sourceMappingURL=loader-compiled-compiled.js.map\n\n//# sourceMappingURL=loader-compiled-compiled-compiled.js.map"]}