{"version":3,"sources":["../thenify/node_modules/any-promise/loader.js"],"names":[],"mappings":"AAAA;AACI;;AACJ,IAAI,mBAAmB,4BAAvB;;AACI;AACA,aAAa,IAFjB;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAO,OAAP,GAAiB,UAAS,IAAT,EAAe,kBAAf,EAAkC;AACjD,SAAO,SAAS,QAAT,CAAkB,cAAlB,EAAkC,IAAlC,EAAuC;AAC5C,qBAAiB,kBAAkB,IAAnC;AACA,WAAO,QAAQ,EAAf;AACA;AACA,QAAI,iBAAiB,KAAK,MAAL,KAAgB,KAArC;;AAEA;AACA,QAAG,eAAe,IAAf,IAAuB,cAA1B,EAAyC;AACvC,mBAAa,KAAK,gBAAL,KAA0B,IAAvC;AACD;;AAED,QAAG,eAAe,IAAf,IACI,mBAAmB,IADvB,IAEI,WAAW,cAAX,KAA8B,cAFrC,EAEoD;AAClD;AACA,YAAM,IAAI,KAAJ,CAAU,qCAAmC,WAAW,cAA9C,GACd,+DADc,GAEd,yEAFI,CAAN;AAGD;;AAED,QAAG,eAAe,IAAlB,EAAuB;AACrB;AACA,UAAG,mBAAmB,IAAnB,IAA2B,OAAO,KAAK,OAAZ,KAAwB,WAAtD,EAAkE;AAChE,qBAAa;AACX,mBAAS,KAAK,OADH;AAEX,0BAAgB;AAFL,SAAb;AAID,OALD,MAKO;AACL;AACA,qBAAa,mBAAmB,cAAnB,CAAb;AACD;;AAED,UAAG,cAAH,EAAkB;AAChB;AACA,aAAK,gBAAL,IAAyB,UAAzB;AACD;AACF;;AAED,WAAO,UAAP;AACD,GAvCD;AAwCD,CAzCD","file":"loader-compiled.js","sourcesContent":["\"use strict\"\n    // global key for user preferred registration\nvar REGISTRATION_KEY = '@@any-promise/REGISTRATION',\n    // Prior registration (preferred or detected)\n    registered = null\n\n/**\n * Registers the given implementation.  An implementation must\n * be registered prior to any call to `require(\"any-promise\")`,\n * typically on application load.\n *\n * If called with no arguments, will return registration in\n * following priority:\n *\n * For Node.js:\n *\n * 1. Previous registration\n * 2. global.Promise if node.js version >= 0.12\n * 3. Auto detected promise based on first sucessful require of\n *    known promise libraries. Note this is a last resort, as the\n *    loaded library is non-deterministic. node.js >= 0.12 will\n *    always use global.Promise over this priority list.\n * 4. Throws error.\n *\n * For Browser:\n *\n * 1. Previous registration\n * 2. window.Promise\n * 3. Throws error.\n *\n * Options:\n *\n * Promise: Desired Promise constructor\n * global: Boolean - Should the registration be cached in a global variable to\n * allow cross dependency/bundle registration?  (default true)\n */\nmodule.exports = function(root, loadImplementation){\n  return function register(implementation, opts){\n    implementation = implementation || null\n    opts = opts || {}\n    // global registration unless explicitly  {global: false} in options (default true)\n    var registerGlobal = opts.global !== false;\n\n    // load any previous global registration\n    if(registered === null && registerGlobal){\n      registered = root[REGISTRATION_KEY] || null\n    }\n\n    if(registered !== null\n        && implementation !== null\n        && registered.implementation !== implementation){\n      // Throw error if attempting to redefine implementation\n      throw new Error('any-promise already defined as \"'+registered.implementation+\n        '\".  You can only register an implementation before the first '+\n        ' call to require(\"any-promise\") and an implementation cannot be changed')\n    }\n\n    if(registered === null){\n      // use provided implementation\n      if(implementation !== null && typeof opts.Promise !== 'undefined'){\n        registered = {\n          Promise: opts.Promise,\n          implementation: implementation\n        }\n      } else {\n        // require implementation if implementation is specified but not provided\n        registered = loadImplementation(implementation)\n      }\n\n      if(registerGlobal){\n        // register preference globally in case multiple installations\n        root[REGISTRATION_KEY] = registered\n      }\n    }\n\n    return registered\n  }\n}\n"]}