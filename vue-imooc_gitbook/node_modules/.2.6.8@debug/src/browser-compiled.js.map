{"version":3,"sources":["../../debug/src/browser.js"],"names":[],"mappings":"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","file":"browser-compiled.js","sourcesContent":["/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n"]}